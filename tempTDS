import os 
import glob
import time


import board
import busio
import thingspeak
import adafruit_ads1x15.ads1115 as ADS
from adafruit_ads1x15.analog_in import AnalogIn


#id number
channel_id = 1892223
write_api_key = 'X0EQHYBWSBY31RGK'
read_api_key = 'V2OH32HPC3KZRKZS'

# Create the I2C bus
i2c = busio.I2C(board.SCL, board.SDA)

# Create the ADC object using the I2C bus
ads = ADS.ADS1115(i2c)

# Create single-ended input on channel 0
chan = AnalogIn(ads, ADS.P1)


os.system('modprobe w1-gpio') 
os.system('modprobe w1-therm')

base_dir = '/sys/bus/w1/devices/' 
device_folder = glob.glob(base_dir + '28*')[0] 
device_file = device_folder + '/w1_slave'

def read_temp_raw():
    f = open(device_file, 'r')
    lines = f.readlines()
    f.close()
    return lines
 

def read_temp(scale):
     lines = read_temp_raw()
     while lines[0].strip()[-3:] != 'YES':
          time.sleep(0.2)
          lines = read_temp_raw() 
     equals_pos = lines[1].find('t=') 
     if equals_pos != -1:
          temp_string = lines[1][equals_pos+2:] 
          temp_c = float(temp_string) / 1000.0 
          temp_f = temp_c * 9.0 / 5.0 + 32.0 
          if scale == "F":
               return "{:.1f}".format(temp_f)
          if scale =="C":
               return "{:.1f}".format(temp_c)     
          else:
               return temp_c, temp_f

while True:
    voltage = chan.voltage;
    #insert the voltage to tds conversion value that can be found in tye pHtempTDS doc
    tdsValue=; #1.60 is the offset 
    print(tdsValue)
    
    if __name__ == "__main__":

     print(tdsValue)
     
     print(read_temp(""))
    
     wr_channel = thingspeak.Channel(id=channel_id, api_key=write_api_key)
     wr_channel.update({'field1':read_temp(""), 'field2':tdsValue, 'field3':0})
     time.sleep(16)
    #if(-1200<tdsValue<1):
      #  zero = 0
       # print(zero)
    #else:
       # print(tdsValue)
       
    


# Create differential input between channel 0 and 1
#chan = AnalogIn(ads, ADS.P0, ADS.P1)




    
       
       

